{"ast":null,"code":"import _regeneratorRuntime from \"/home/server/Escritorio/frontend/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/home/server/Escritorio/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/server/Escritorio/frontend/src/componets/commons/auth/auth-context.js\";\nimport React, { useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { login } from \"../../axios/login\";\nimport { register } from \"../../axios/register\"; // 1) Creamos el contexto\n\nvar AuthContext = React.createContext(); // Recuperamos el token del localStorage ya que si el usuario\n// refresca la página del navegador necesito iniciar la aplicación\n// con un estado autenticado\n\nvar currentUser = JSON.parse(localStorage.getItem(\"currentUser\")); // 2) Creamos el custom Provider\n\nexport function AuthProvider(_ref) {\n  var children = _ref.children;\n\n  // 2.1) Creamos Estados\n  // En caso de que trabaje con roles deberia decodificar el token para obtener el role inicial\n  // const [role, setRole] = useState(decodeTokenAndGetRole(currentUser.token));\n  var _useState = useState(currentUser !== null),\n      _useState2 = _slicedToArray(_useState, 2),\n      isAuthenticated = _useState2[0],\n      setIsAuthenticated = _useState2[1];\n\n  var _useState3 = useState(currentUser && currentUser.user),\n      _useState4 = _slicedToArray(_useState3, 2),\n      user = _useState4[0],\n      setUser = _useState4[1];\n\n  var history = useHistory(); // 2.2) Definiremos los métodos para modificar el estado\n  // Login => Cambiaré a true mi estado\n  // Si trabajo con roles puedo establecer el role a través de la decodificación del token\n\n  var signIn = function signIn(_ref2) {\n    var email, password, _ref3, _ref3$data, token, _user;\n\n    return _regeneratorRuntime.async(function signIn$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            email = _ref2.email, password = _ref2.password;\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(login(email, password));\n\n          case 4:\n            _ref3 = _context.sent;\n            _ref3$data = _ref3.data;\n            token = _ref3$data.token;\n            _user = _ref3$data.user;\n            setUser(_user);\n            setIsAuthenticated(true); // Si uso roles => decodificar el token para sacar el role\n            // setRole(role);\n\n            if (token) {\n              history.push(\"/user\");\n            }\n\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](1);\n            return _context.abrupt(\"return\", Promise.reject(_context.t0));\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 13]]);\n  }; // Register => Cambiaré a true mi estado\n\n\n  var signUp = function signUp(_ref4) {\n    var firstName, lastName, email, password, gender, dob, address, postalCode, phone, borIn, _ref5, _ref5$data, token, _user2;\n\n    return _regeneratorRuntime.async(function signUp$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            firstName = _ref4.firstName, lastName = _ref4.lastName, email = _ref4.email, password = _ref4.password, gender = _ref4.gender, dob = _ref4.dob, address = _ref4.address, postalCode = _ref4.postalCode, phone = _ref4.phone, borIn = _ref4.borIn;\n            console.log(firstName);\n            _context2.prev = 2;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(register({\n              firstName: firstName,\n              lastName: lastName,\n              email: email,\n              password: password,\n              gender: gender,\n              dob: dob,\n              address: address,\n              postalCode: postalCode,\n              phone: phone,\n              borIn: borIn\n            }));\n\n          case 5:\n            _ref5 = _context2.sent;\n            _ref5$data = _ref5.data;\n            token = _ref5$data.token;\n            _user2 = _ref5$data.user;\n            _context2.next = 14;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](2);\n            return _context2.abrupt(\"return\", Promise.reject(_context2.t0));\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[2, 11]]);\n  }; // Logout => Cambiaré a false mi estado\n\n\n  var logout = function logout() {\n    setUser(null);\n    setIsAuthenticated(false);\n    localStorage.removeItem(\"currentUser\");\n  }; // 2.3) Devolvemos el Context\n  // Si usara roles puedo devolver el role actual del usuario en lugar de isAuthenticated\n  // return (\n  //   <AuthContext.Provider\n  //     value={{ role, setRole, signIn, user }}\n  //   >\n  //     {children}\n  //   </AuthContext.Provider>\n  // );\n\n\n  return React.createElement(AuthContext.Provider, {\n    value: {\n      isAuthenticated: isAuthenticated,\n      setIsAuthenticated: setIsAuthenticated,\n      signIn: signIn,\n      user: user,\n      signUp: signUp,\n      logout: logout\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, children);\n} // 3) Crear el custom hook\n// Es lo que usaré en los componentes para acceder al value del contexto\n\nexport function useAuth() {\n  var context = useContext(AuthContext);\n  return context;\n}","map":{"version":3,"sources":["/home/server/Escritorio/frontend/src/componets/commons/auth/auth-context.js"],"names":["React","useState","useContext","useHistory","login","register","AuthContext","createContext","currentUser","JSON","parse","localStorage","getItem","AuthProvider","children","isAuthenticated","setIsAuthenticated","user","setUser","history","signIn","email","password","data","token","push","Promise","reject","signUp","firstName","lastName","gender","dob","address","postalCode","phone","borIn","console","log","logout","removeItem","useAuth","context"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { login } from \"../../axios/login\";\nimport { register } from \"../../axios/register\";\n\n// 1) Creamos el contexto\nconst AuthContext = React.createContext();\n\n// Recuperamos el token del localStorage ya que si el usuario\n// refresca la página del navegador necesito iniciar la aplicación\n// con un estado autenticado\nconst currentUser = JSON.parse(localStorage.getItem(\"currentUser\"));\n\n// 2) Creamos el custom Provider\nexport function AuthProvider({ children }) {\n  // 2.1) Creamos Estados\n  // En caso de que trabaje con roles deberia decodificar el token para obtener el role inicial\n  // const [role, setRole] = useState(decodeTokenAndGetRole(currentUser.token));\n  const [isAuthenticated, setIsAuthenticated] = useState(currentUser !== null);\n  const [user, setUser] = useState(currentUser && currentUser.user);\n\n  const history = useHistory();\n\n  // 2.2) Definiremos los métodos para modificar el estado\n  // Login => Cambiaré a true mi estado\n  // Si trabajo con roles puedo establecer el role a través de la decodificación del token\n  const signIn = async ({ email, password }) => {\n    try {\n      const {\n        data: { token, user }\n      } = await login(email, password);\n      setUser(user);\n      setIsAuthenticated(true);\n      // Si uso roles => decodificar el token para sacar el role\n      // setRole(role);\n      if (token) {\n        history.push(\"/user\");\n      }\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  };\n\n  // Register => Cambiaré a true mi estado\n  const signUp = async ({\n    firstName,\n    lastName,\n    email,\n    password,\n    gender,\n    dob,\n    address,\n    postalCode,\n    phone,\n    borIn,\n  }) => {\n    console.log(firstName)\n    try {\n      const {\n        data: { token, user }\n      } = await register({\n        firstName,\n        lastName,\n        email,\n        password,\n        gender,\n        dob,\n        address,\n        postalCode,\n        phone,\n        borIn,\n      });\n      \n    } catch (error) {\n      return Promise.reject(error);\n    }\n  };\n\n  // Logout => Cambiaré a false mi estado\n  const logout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    localStorage.removeItem(\"currentUser\");\n  };\n\n  // 2.3) Devolvemos el Context\n  // Si usara roles puedo devolver el role actual del usuario en lugar de isAuthenticated\n  // return (\n  //   <AuthContext.Provider\n  //     value={{ role, setRole, signIn, user }}\n  //   >\n  //     {children}\n  //   </AuthContext.Provider>\n  // );\n  return (\n    <AuthContext.Provider\n      value={{\n        isAuthenticated,\n        setIsAuthenticated,\n        signIn,\n        user,\n        signUp,\n        logout\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\n// 3) Crear el custom hook\n// Es lo que usaré en los componentes para acceder al value del contexto\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}