{"ast":null,"code":"var _jsxFileName = \"/home/server/Escritorio/frontend/src/componets/pages/registrarse2.js\";\nimport React, { componets } from \"react\";\nimport { useAuth } from \"../commons/auth/auth-context\";\nimport { useForm } from \"react-hook-form\";\nimport { REGISTER_VALIDATIONS } from \"../commons/auth/validation\";\n\nfunction log() {\n  var _useAuth = useAuth(),\n      signIN = _useAuth.signIN;\n\n  var _useForm = useForm({\n    mode: \"onBlur\" // Lanza validaciones cada vez que hago blur\n\n  }),\n      register = _useForm.register,\n      errors = _useForm.errors,\n      formState = _useForm.formState,\n      handleSubmit = _useForm.handleSubmit,\n      setError = _useForm.setError;\n\n  var handleSignUp = function handleSignUp(formData) {\n    return signIN(formData).catch(function (error) {\n      if (error.response.status === 409) {\n        setError(\"email\", \"conflict\", \"The email already exists. Please try again\");\n      }\n    });\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    id: \"registro\",\n    onSubmit: handleSubmit(handleSignUp),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"regis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"firstName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"Nombre\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"firstName\",\n    ref: register(REGISTER_VALIDATIONS.firstName),\n    id: \"firstName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"lastName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Apellidos\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"lastName\",\n    ref: register(REGISTER_VALIDATIONS.lastName),\n    id: \"lastName\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"phone\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Telefono\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"phone\",\n    ref: register(REGISTER_VALIDATIONS.phone),\n    id: \"phone\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"dob\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Fecha de nacimiento\"), React.createElement(\"input\", {\n    type: \"date\",\n    name: \"dob\",\n    ref: register(REGISTER_VALIDATIONS.dob),\n    id: \"dob\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"gender\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Genero\"), React.createElement(\"select\", {\n    name: \"gender\",\n    ref: register(REGISTER_VALIDATIONS.gender),\n    id: \"gender\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Mujer\"), React.createElement(\"option\", {\n    value: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Hombre\"))), React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Email\"), React.createElement(\"input\", {\n    type: \"email\",\n    name: \"email\",\n    ref: register(REGISTER_VALIDATIONS.email),\n    id: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Password\"), React.createElement(\"input\", {\n    type: \"password\",\n    name: \"password\",\n    ref: register(REGISTER_VALIDATIONS.password),\n    id: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"address\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"Direccion\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"address\",\n    ref: register(REGISTER_VALIDATIONS.address),\n    id: \"address\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"postalCode\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Codigo Postal\"), React.createElement(\"input\", {\n    type: \"text\",\n    name: \"postalCode\",\n    ref: register(REGISTER_VALIDATIONS.postalCode),\n    id: \"postalCode\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"borIn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Lugar de nacimiento\"), React.createElement(\"select\", {\n    name: \"bornIn\",\n    ref: register(REGISTER_VALIDATIONS.bornIn),\n    id: \"bornIn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"Spain\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"Spain\"), React.createElement(\"option\", {\n    value: \"Other\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Other\")))), React.createElement(\"button\", {\n    id: \"registrarse\",\n    type: \"submit\",\n    disabled: formState.isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Registrarse\")));\n}\n\nfunction Registrarse2(setIsFormOpen) {\n  var _useAuth2 = useAuth(),\n      signIN = _useAuth2.signIN;\n\n  var _useForm2 = useForm({\n    mode: \"onBlur\" // Lanza validaciones cada vez que hago blur\n\n  }),\n      logear = _useForm2.logear,\n      errors = _useForm2.errors,\n      formState = _useForm2.formState,\n      handleSubmit = _useForm2.handleSubmit,\n      setError = _useForm2.setError;\n\n  var handleSignUp = function handleSignUp(formData) {\n    return signIN(formData).catch(function (error) {\n      if (error.response.status === 409) {\n        setError(\"email\", \"conflict\", \"The email already exists. Please try again\");\n      }\n    });\n  };\n\n  return React.createElement(\"span\", {\n    id: \"login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"close\",\n    onClick: function onClick() {\n      return setIsFormOpen(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"X\"), React.createElement(\"form\", {\n    action: \"\",\n    method: \"post\",\n    onSubmit: handleSubmit(handleSignUp),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Email\"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"email\",\n    ref: logear(LOGEARSE_VALIDATIONS.email),\n    name: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"errorMessage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, errors.name && errors.name.message), React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"Contrase\\xF1a\"), React.createElement(\"input\", {\n    type: \"password\",\n    id: \"password\",\n    ref: logear(LOGEARSE_VALIDATIONS.PASSWORD),\n    name: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"errorMessage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, errors.name && errors.name.message), React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"btn\",\n    disabled: formState.isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"Entrar\")))));\n}\n\nexport default Registrarse2;","map":{"version":3,"sources":["/home/server/Escritorio/frontend/src/componets/pages/registrarse2.js"],"names":["React","componets","useAuth","useForm","REGISTER_VALIDATIONS","log","signIN","mode","register","errors","formState","handleSubmit","setError","handleSignUp","formData","catch","error","response","status","firstName","lastName","phone","dob","gender","email","password","address","postalCode","bornIn","isSubmitting","Registrarse2","setIsFormOpen","logear","LOGEARSE_VALIDATIONS","name","message","PASSWORD"],"mappings":"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","sourcesContent":["import React, { componets } from \"react\";\nimport { useAuth } from \"../commons/auth/auth-context\";\nimport {useForm} from \"react-hook-form\";\nimport { REGISTER_VALIDATIONS } from \"../commons/auth/validation\";\n\nfunction log() {\n    const { signIN } = useAuth();\n    const { register, errors, formState, handleSubmit, setError } = useForm({\n      mode: \"onBlur\" // Lanza validaciones cada vez que hago blur\n    });\n\n    const handleSignUp = formData => {\n        return signIN(formData).catch(error => {\n          if (error.response.status === 409) {\n            setError(\n              \"email\",\n              \"conflict\",\n              \"The email already exists. Please try again\"\n            );\n          }\n        });\n      };\n    \nreturn (\n    <React.Fragment>\n        <form id=\"registro\" onSubmit={handleSubmit(handleSignUp)}>\n            <div id=\"regis\">\n        <fieldset>\n            <label htmlFor=\"firstName\" >Nombre</label>\n                 <input type=\"text\"\n                    name=\"firstName\"\n                    ref={register(REGISTER_VALIDATIONS.firstName)}\n                    id=\"firstName\"/>\n            <label htmlFor=\"lastName\">Apellidos</label>\n                 <input type=\"text\" \n                 name=\"lastName\"\n                 ref={register(REGISTER_VALIDATIONS.lastName)}\n                 id=\"lastName\"/>\n            <label htmlFor=\"phone\">Telefono</label>\n                 <input type=\"text\"\n                 name=\"phone\"\n                 ref={register(REGISTER_VALIDATIONS.phone)}\n                 id=\"phone\"/>\n            <label htmlFor=\"dob\">Fecha de nacimiento</label>\n                 <input type=\"date\"\n                 name=\"dob\"\n                 ref={register(REGISTER_VALIDATIONS.dob)}\n                 id=\"dob\"/>\n            <label htmlFor=\"gender\">Genero</label>\n                 <select\n                 name=\"gender\"\n                 ref={register(REGISTER_VALIDATIONS.gender)}\n                 id=\"gender\">\n                     <option value=\"1\">Mujer</option>\n                    <option value=\"0\">Hombre</option>\n                </select>\n        </fieldset>\n        <fieldset>\n            <label htmlFor=\"email\">Email</label>            \n                 <input type=\"email\"\n                 name=\"email\"\n                 ref={register(REGISTER_VALIDATIONS.email)}\n                 id=\"email\"/>\n            <label htmlFor=\"password\">Password</label>            \n                 <input type=\"password\"\n                 name=\"password\"\n                 ref={register(REGISTER_VALIDATIONS.password)}\n                 id=\"password\"/>\n            <label htmlFor=\"address\">Direccion</label>\n                 <input type=\"text\"\n                  name=\"address\"\n                 ref={register(REGISTER_VALIDATIONS.address)}\n                 id=\"address\"/>\n\n            <label htmlFor=\"postalCode\">Codigo Postal</label>\n                 <input type=\"text\" \n                 name=\"postalCode\"\n                 ref={register(REGISTER_VALIDATIONS.postalCode)}\n                 id=\"postalCode\"/>\n            <label htmlFor=\"borIn\">Lugar de nacimiento</label>   \n                 <select\n                 name=\"bornIn\"\n                 ref={register(REGISTER_VALIDATIONS.bornIn)}\n                 id=\"bornIn\">\n                     <option value=\"Spain\">Spain</option>\n                     <option value=\"Other\">Other</option>\n                 </select>\n        </fieldset>\n        </div>\n        <button id=\"registrarse\" type=\"submit\"\n        disabled={formState.isSubmitting}>\n        Registrarse\n        </button>\n        </form>\n</React.Fragment>\n)\n\n}\n\nfunction Registrarse2(setIsFormOpen) {\n     const { signIN } = useAuth();\n     const { logear, errors, formState, handleSubmit, setError } = useForm({\n       mode: \"onBlur\" // Lanza validaciones cada vez que hago blur\n     });\n     \n     const handleSignUp = formData => {\n       return signIN(formData).catch(error => {\n             if (error.response.status === 409) {\n               setError(\n                 \"email\",\n                 \"conflict\",\n                 \"The email already exists. Please try again\"\n               );\n             }\n           });\n         };\n     \n     return (\n <span id=\"login\">  \n <div>\n   <button className=\"close\" onClick={() => setIsFormOpen(false)}>X</button>\n   <form action=\"\" method=\"post\" onSubmit={handleSubmit(handleSignUp)}>\n     <fieldset>\n       <label htmlFor=\"email\">Email</label>\n       <input type=\"text\" id=\"email\"\n       ref={logear(LOGEARSE_VALIDATIONS.email)}\n        name=\"email\" />\n        <span className=\"errorMessage\">\n           {errors.name && errors.name.message}\n         </span>\n       <label htmlFor=\"password\">Contraseña</label>\n       <input type=\"password\" id=\"password\"\n       ref={logear(LOGEARSE_VALIDATIONS.PASSWORD)}\n       name=\"password\" />\n       <span className=\"errorMessage\">\n           {errors.name && errors.name.message}\n         </span>\n       <button type=\"submit\"\n           className=\"btn\"\n           disabled={formState.isSubmitting}>\n       Entrar</button>\n     </fieldset>\n   </form>\n   </div>\n </span>\n );\n}\n\nexport default Registrarse2;"]},"metadata":{},"sourceType":"module"}